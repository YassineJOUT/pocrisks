version: '3.8'
# volumes:
#   db-backups:
#   db-data:
services:
  client:
    container_name: client
    stdin_open: true
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.react
    volumes:
      - './client:/usr/src/app'
    ports:
      - 3001:3000
  server: 
    container_name: server
    build: 
        context: .
        dockerfile: dockerfiles/Dockerfile.server
    volumes:
      - ./server:/opt/app
    ports:
      - 0.0.0.0:8081:8080
  # db:
  #   image: kartoza/postgis:13.0
  #   volumes:
  #     - db-data:/var/lib/postgresql
  #   environment:
  #     - POSTGRES_DB=gis
  #     - POSTGRES_USER=docker
  #     - POSTGRES_PASS=docker
  #     - ALLOW_IP_RANGE=0.0.0.0/0
  #     - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
  #   restart: on-failure
  #   healthcheck:
  #     test: "exit 0"

  # dbbackups:
  #   image: kartoza/pg-backup:13.0
  #   volumes:
  #     - db-backups:/backups
  #   environment:
  #     - DUMPPREFIX=PG_gis
  #     - POSTGRES_HOST=db
  #     - POSTGRES_USER=docker
  #     - POSTGRES_PASS=docker
  #     - POSTGRES_PORT=5432
  #     # Add a custom archive so that it can be used to restore as a test
  #     #- ARCHIVE_FILENAME=latest
  #     # For restore script
  #     #- TARGET_DB=gis
  #     #- WITH_POSTGIS=1
  #     #- TARGET_ARCHIVE=/backups/latest.gis.dmp
  #   restart: on-failure
  #   depends_on: [db]